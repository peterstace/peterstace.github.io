<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Peter Stace</title>
    <link>https://petsta.net/</link>
    <description>Recent content on Peter Stace</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 06 Jul 2020 20:13:00 +0000</lastBuildDate><atom:link href="https://petsta.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using Go&#39;s RWMutex recursively is a bug</title>
      <link>https://petsta.net/posts/recursive-rwmutex/</link>
      <pubDate>Fri, 14 Oct 2022 05:13:31 +1100</pubDate>
      
      <guid>https://petsta.net/posts/recursive-rwmutex/</guid>
      <description>A previous blog post made a few claims about recursive usage of Go&amp;rsquo;s RWMutex. In particular:
Recursive usage is always a bug. This class of bug is hard to detect via testing. The bug may lay dormant for a long time before causing problems. These claims were used as part of a justification for preferring Mutex over RWMutex as a default choice and only using RWMutex after having explicitly calculated that RWMutex would give a performance improvement.</description>
    </item>
    
    <item>
      <title>When to use Go&#39;s RWMutex</title>
      <link>https://petsta.net/posts/rwmutex/</link>
      <pubDate>Fri, 30 Sep 2022 10:25:05 +1000</pubDate>
      
      <guid>https://petsta.net/posts/rwmutex/</guid>
      <description>The Go programming language has two flavours of mutex that can be used to serialise access to shared state. They are sync.Mutex and sync.RWMutex. This blog post explains the differences between them and quantitatively analyses why RWMutex may not give performance benefits over Mutex even under read-heavy data access scenarios.
The mutex is a classic synchronisation primitive A mutex is a synchronisation primitive that can be used to help ensure only a single thread of execution can access a critical section at any one time.</description>
    </item>
    
    <item>
      <title>Indirect Expansion in Bash</title>
      <link>https://petsta.net/posts/bash-indirect-expansion/</link>
      <pubDate>Thu, 21 Jul 2022 19:29:28 +0000</pubDate>
      
      <guid>https://petsta.net/posts/bash-indirect-expansion/</guid>
      <description>I recently came across a useful feature in bash that I hadn&amp;rsquo;t seen before. The feature is called &amp;ldquo;indirect expansion&amp;rdquo;. It&amp;rsquo;s documented in the bash man pages1, although not prominently.
Indirect expansion allows a parameter to be expanded twice. First, the parameter is expanded in the regular way. Then, the result of the first expansion is expanded. This allows you to store the name of a parameter within another parameter, and perform the full expansion in a single step.</description>
    </item>
    
    <item>
      <title>Network Fundamentals</title>
      <link>https://petsta.net/notes/network-fundamentals/</link>
      <pubDate>Tue, 16 Mar 2021 18:31:04 +0000</pubDate>
      
      <guid>https://petsta.net/notes/network-fundamentals/</guid>
      <description>The following are notes that I took while watching Network Direction&amp;rsquo;s Network Fundamentals playlist.
Part 1 - Introduction to Networking (no notes)
Part 2 - Cabling Devices (no notes)
Part 3 - How the OSI Model Works Hosts need to communicate with each other in ways that they both understand.
This is done via languages known as protocols.
Several protocols need to work together, and are layered on top of each other.</description>
    </item>
    
    <item>
      <title>Game Analysis: Zara (Bot 750)</title>
      <link>https://petsta.net/chess/bot_750_zara/</link>
      <pubDate>Sun, 07 Feb 2021 03:49:31 +0000</pubDate>
      
      <guid>https://petsta.net/chess/bot_750_zara/</guid>
      <description>Score sheet d4 b5 Bf4 e5 Bxe5 Ba6 Nf3 h5 e3 Rh6 Bf4 Be7 Bxh6 gxh6 Bd3 Kf8 O-O Bb4 c3 Ba5 b4 h4 bxa5 Ke8 Ne5 Ne7 Qh5 Qc8 Nxf7 Nbc6 Nd6+ Kd8 Qe8# Analysis d4 White intends the London system.
&amp;hellip;b5 Black uses the Polish defence.
Bf4 Dark squared Bishop is developed as per the London system.
&amp;hellip; e5 Black hangs the King&amp;rsquo;s pawn. It&amp;rsquo;s attacked twice but is undefended.</description>
    </item>
    
    <item>
      <title>Fast Random Number Generation in Go</title>
      <link>https://petsta.net/posts/fast-random-number-generation-in-go/</link>
      <pubDate>Sat, 25 Jul 2020 07:09:37 +0000</pubDate>
      
      <guid>https://petsta.net/posts/fast-random-number-generation-in-go/</guid>
      <description>Background Some algorithms rely on a stream of random numbers in order to meet their (average) time complexity class. One such famous algorithm is Quicksort.
I recently worked on some performance optimisations for simplefeatures&#39; R-Tree bulk loading algorithm. This bulk loading algorithm also utilises random numbers in order to meet its (average) time complexity class. It actually uses random numbers in a very similar way compared to Quicksort: to select random pivot indices to sort around.</description>
    </item>
    
    <item>
      <title>Deep Work</title>
      <link>https://petsta.net/notes/deep-work/</link>
      <pubDate>Tue, 21 Jul 2020 20:45:13 +0000</pubDate>
      
      <guid>https://petsta.net/notes/deep-work/</guid>
      <description>The following are notes that I took while reading Cal Newport&amp;rsquo;s Deep Work.
Part 1 The defining characteristics of Deep Work are:
Work performed while in a distraction-free state.
Pushes your cognitive abilities to their limit.
Must either improve your skills, or create new value (or both).
Must be hard for others (en masse) to emulate.
The Deep Work Hypothesis asserts the following are true:
Deep work is becoming increasingly valuable over time.</description>
    </item>
    
    <item>
      <title>Using GitHub Actions for Hugo CICD</title>
      <link>https://petsta.net/posts/using-github-actions-for-hugo-cicd/</link>
      <pubDate>Tue, 14 Jul 2020 20:20:44 +0000</pubDate>
      
      <guid>https://petsta.net/posts/using-github-actions-for-hugo-cicd/</guid>
      <description>Background This website is written using Hugo, a static site generator similar to Jekyll and others.
I keep the source for the website in a private repo. The source consists of markdown files and HTML templates.
I serve the website from a public GitHub Pages repo.
When Hugo builds the site, it populates a /public directory in the private repo with the final assets that are ready to be served to site visitors.</description>
    </item>
    
    <item>
      <title>Path Tracing Part 4 - Reflections</title>
      <link>https://petsta.net/posts/path-tracing-part-04-reflections/</link>
      <pubDate>Wed, 26 Jul 2017 13:52:57 +1000</pubDate>
      
      <guid>https://petsta.net/posts/path-tracing-part-04-reflections/</guid>
      <description>The mathematics behind specular reflection in path tracing (or ray tracing) is simple.
When a ray encounters a reflective surface, the ray has to be recast following the rule &amp;ldquo;the angle of incidence is equal to the angle of reflection&amp;rdquo;.
Where d_r is the (unit) reflection ray direction, d_i is the (unit) incident ray direction, and n is the unit normal:
d_r = d_i - 2 * n . d_i I recently added specular reflections to my path tracer, Grayt.</description>
    </item>
    
    <item>
      <title>Panic and Recover as Error Handling Mechanisms in Go</title>
      <link>https://petsta.net/posts/panic-and-recover-as-error-handling-mechanisms/</link>
      <pubDate>Wed, 11 Jan 2017 21:14:51 +1100</pubDate>
      
      <guid>https://petsta.net/posts/panic-and-recover-as-error-handling-mechanisms/</guid>
      <description>In Go, the generally accepted idiomatic way to handle error conditions is via the builtin error type. In most situations, this leads to clear and easy to understand error handling code.
This isn&amp;rsquo;t always the case though. When dealing with a large number of type assertions, panic and recover can lead to elegant and easy to understand code.
I recently came across this sort of situation while writing a decoder for .</description>
    </item>
    
    <item>
      <title>Path Tracing Part 3 - Acceleration Structure</title>
      <link>https://petsta.net/posts/path-tracing-part-03-acceleration-structure/</link>
      <pubDate>Wed, 04 Jan 2017 09:21:37 +1100</pubDate>
      
      <guid>https://petsta.net/posts/path-tracing-part-03-acceleration-structure/</guid>
      <description>I recently added an acceleration data structure to my path tracer. This resulted in a large performance improvement.
The acceleration structure improves the speed of the global ray intersection test, an integral part of any path tracer.
The source code can be found here.
Global Ray Intersection Test The global ray intersection test is the most computationally expensive part of a path tracer. The test takes a ray, and checks to see if it intersects with any of the objects in the scene.</description>
    </item>
    
    <item>
      <title>Path Tracing Part 2 - Depth of Field</title>
      <link>https://petsta.net/posts/path-tracing-part-02-depth-of-field/</link>
      <pubDate>Wed, 21 Dec 2016 19:03:38 +1100</pubDate>
      
      <guid>https://petsta.net/posts/path-tracing-part-02-depth-of-field/</guid>
      <description>Real world cameras can only focus on objects that are a set distance away from them. This distance is known as the subject distance. Objects at other distances will appear more or less out of focus, depending on how far away they are from this point. Objects closer to the camera than the subject distance will appear out of focus, as will objects beyond the subject distance. Objects closer to the subject distance (but still not precisely at it) will still be out of focus, but to a much lesser degree.</description>
    </item>
    
    <item>
      <title>Path Tracing Part 1 - Initial Renders</title>
      <link>https://petsta.net/posts/path-tracing-part-01-initial-renders/</link>
      <pubDate>Tue, 20 Dec 2016 19:55:41 +1100</pubDate>
      
      <guid>https://petsta.net/posts/path-tracing-part-01-initial-renders/</guid>
      <description>Enter Grayt Grayt (Go Ray Tracer) was a project that I started in mid 2014 to help me learn Go. As the name suggests, it started out as a ray tracer. Having implemented ray tracers before (in C++), this was quite straight forward but ultimately wasn&amp;rsquo;t very satisfying. I still wanted a side project to learn Go with, so I pivoted it from a ray tracer to a path tracer. Path tracers are much harder to implement, and produce more realistic renderings.</description>
    </item>
    
    <item>
      <title>Bolt250 Part 1 - The Unboxing</title>
      <link>https://petsta.net/posts/bolt250-part01-unboxing/</link>
      <pubDate>Wed, 06 Jan 2016 22:17:35 +1100</pubDate>
      
      <guid>https://petsta.net/posts/bolt250-part01-unboxing/</guid>
      <description>I&amp;rsquo;m building a new miniquad, the Bolt250 from BoltRC. It&amp;rsquo;s a midpriced 250mm class racing quadcopter.
I went with the ARF kit rather than just getting the frame.
The Bolt250 comes with two different hardware versions, standard (30mm standoffs) and stealth (25mm standoffs). It also comes with the choice of 3mm or 4mm arm thickness, with clearance for either 5&amp;quot; or 6&amp;quot; props. I opted for the stealth hardware with 4mm/5&amp;quot; arms.</description>
    </item>
    
    <item>
      <title>Irregular JSON decoding in Go</title>
      <link>https://petsta.net/posts/irregular-json-decoding-in-go/</link>
      <pubDate>Thu, 18 Jun 2015 22:03:45 +1100</pubDate>
      
      <guid>https://petsta.net/posts/irregular-json-decoding-in-go/</guid>
      <description>The Go standard library has an awesome JSON encoding and decoding package, which makes handling JSON a breeze. If you&amp;rsquo;re not familiar with the package, there are plenty of web pages around that explain its basic usage.
Basically, if you know the structure of the JSON value you&amp;rsquo;re encoding, you create the zero value of the corresponding Go type, and pass a pointer to it into the json.Unmarshal (along with the JSON value).</description>
    </item>
    
    <item>
      <title>Go, gofmt, and diffs</title>
      <link>https://petsta.net/posts/go-gofmt-and-diff/</link>
      <pubDate>Tue, 02 Jun 2015 22:00:15 +1100</pubDate>
      
      <guid>https://petsta.net/posts/go-gofmt-and-diff/</guid>
      <description>Gofmt is a Go program formatter. Its universal adoption by the Go community has resulted in a consistent formatting style among most if not all Go source code.
When making changes to Go code, gofmt sometimes causes changes to lines of code that weren&amp;rsquo;t originally modified. This can done for example to keep indentation consistent. This can make diffs hard to read.
For example, the following is a diff of a simple type declaration:</description>
    </item>
    
    <item>
      <title>Where should I put my mocks in Go?</title>
      <link>https://petsta.net/posts/where-should-i-put-my-mocks-in-go/</link>
      <pubDate>Thu, 21 May 2015 21:51:39 +1100</pubDate>
      
      <guid>https://petsta.net/posts/where-should-i-put-my-mocks-in-go/</guid>
      <description>Introduction Go&amp;rsquo;s toolchain provides a mechanism to help prevent test code from being included in production binaries. It should be obvious why this is useful; if stubs or mocks intended for testing make their way your production system, they may cause it to fail silently in catastrophic and unexpected ways. This is especially a concern if you don&amp;rsquo;t have automated application and integration tests in place. Imagine if you somehow end up with a stubbed out authentication manager that always returns true when asked if a user has administration privileges.</description>
    </item>
    
    <item>
      <title>Book Diary</title>
      <link>https://petsta.net/book-diary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://petsta.net/book-diary/</guid>
      <description>Artemis Andy Weir &amp;minus; Science fiction &amp;minus; Feb. 2023
Rating: ★★★☆☆
After thoroughly enjoying Andy Weir&#39;s The Martian and Project Hail Mary, Artemis was a disappointment. The story follows Jazz, a resident of a moon colony named Artemis, as she attempts to commit the perfect crime. The story is okay, but nothing exceptional. It&#39;s predictable in many parts but still has enough twists and turns to keep the reader off guard.</description>
    </item>
    
    <item>
      <title>Quotes</title>
      <link>https://petsta.net/quotes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://petsta.net/quotes/</guid>
      <description>When people show you who they are, believe them the first time.
&amp;mdash; Maya Angelou
If you&amp;#39;re perpetually angry and depressed and confused and unloving, it doesn&amp;#39;t matter how much success you have or who is in your life, you&amp;#39;re not going to enjoy any of it.
&amp;mdash; Sam Harris
If you try to do something right now and it goes poorly, you&amp;#39;re going to know, and then you can&amp;#39;t delude yourself into thinking that it&amp;#39;s going to happen at some future time and it&amp;#39;s going to be better</description>
    </item>
    
    <item>
      <title>Useful Resources</title>
      <link>https://petsta.net/useful-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://petsta.net/useful-resources/</guid>
      <description>References This is a collection of useful references and documentation that I keep coming back to.
Go Go Code Review Comments
Practical Go: Real world advice for writing maintainable Go programs
Bash Google&amp;rsquo;s shell style guide
TLDP Advanced Bash-Scripting Guide
General HTTP Statuses
Naming Schemes
YAML Multiline
Swagger Specification
Understanding JSON Schema
Terraform AWS Provider
Blog Posts This is a list of excellent blog posts by others. I consider them to be written to a very high quality quality standard, express a rarely communicated but useful idea, or be something that I should come back to and think about from time to time.</description>
    </item>
    
  </channel>
</rss>
