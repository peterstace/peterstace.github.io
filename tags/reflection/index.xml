<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>reflection on Peter Stace</title>
    <link>https://petsta.net/tags/reflection/</link>
    <description>Recent content in reflection on Peter Stace</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 26 Jul 2017 13:52:57 +1000</lastBuildDate><atom:link href="https://petsta.net/tags/reflection/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Path Tracing Part 4 - Reflections</title>
      <link>https://petsta.net/posts/path-tracing-part-04-reflections/</link>
      <pubDate>Wed, 26 Jul 2017 13:52:57 +1000</pubDate>
      
      <guid>https://petsta.net/posts/path-tracing-part-04-reflections/</guid>
      <description>The mathematics behind specular reflection in path tracing (or ray tracing) is simple.
When a ray encounters a reflective surface, the ray has to be recast following the rule &amp;ldquo;the angle of incidence is equal to the angle of reflection&amp;rdquo;.
Where d_r is the (unit) reflection ray direction, d_i is the (unit) incident ray direction, and n is the unit normal:
d_r = d_i - 2 * n . d_i I recently added specular reflections to my path tracer, Grayt.</description>
    </item>
    
    <item>
      <title>Path Tracing Part 1 - Initial Renders</title>
      <link>https://petsta.net/posts/path-tracing-part-01-initial-renders/</link>
      <pubDate>Tue, 20 Dec 2016 19:55:41 +1100</pubDate>
      
      <guid>https://petsta.net/posts/path-tracing-part-01-initial-renders/</guid>
      <description>Enter Grayt Grayt (Go Ray Tracer) was a project that I started in mid 2014 to help me learn Go. As the name suggests, it started out as a ray tracer. Having implemented ray tracers before (in C++), this was quite straight forward but ultimately wasn&amp;rsquo;t very satisfying. I still wanted a side project to learn Go with, so I pivoted it from a ray tracer to a path tracer. Path tracers are much harder to implement, and produce more realistic renderings.</description>
    </item>
    
  </channel>
</rss>
